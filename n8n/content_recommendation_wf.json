{
  "name": "content_recommendation_wf",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "61cbb276-d1b1-4cd1-9f08-78552c46fe42",
              "name": "animes_id",
              "value": "={{ $json.body.ratings.map(rating => rating.anime_id) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2672,
        336
      ],
      "id": "70ae574e-9d32-43a8-8349-e7c1da257d16",
      "name": "Fetch animes ids"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "61cbb276-d1b1-4cd1-9f08-78552c46fe42",
              "name": "ratings",
              "value": "={{ $('Webhook').item.json.body.ratings }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2448,
        528
      ],
      "id": "ff46306c-ae95-47ea-9d6d-5f96b05640c5",
      "name": "Get ratings"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "keepEverything",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2224,
        432
      ],
      "id": "546b8773-dff9-4f17-8ee1-28970d0a9290",
      "name": "Merge"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "mock_animes: list[dict] = [\n    {\n        \"id\": 4,\n        \"title\": \"Fullmetal Alchemist: Brotherhood\",\n        \"description\": \"A saiyan’s journey.\",\n        \"seasons\": 1,\n        \"episodes\": 64,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/7/74/Fullmetal_Alchemist_Brotherhood.jpg\"\n    },\n    {\n        \"id\": 5,\n        \"title\": \"Neon Genesis Evangelion\",\n        \"description\": \"A saiyan’s journey.\",\n        \"seasons\": 1,\n        \"episodes\": 26,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/0/06/NeonGenesisEvangelionPoster.jpg\"\n    },\n    {\n        \"id\": 6,\n        \"title\": \"Attack on Titan\",\n        \"description\": \"Humanity fights for survival against man-eating titans.\",\n        \"seasons\": 4,\n        \"episodes\": 87,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/7/73/Attack_on_Titan_S1_DVD.jpg\"\n    },\n    {\n        \"id\": 7,\n        \"title\": \"Death Note\",\n        \"description\": \"A student discovers a notebook that can kill anyone whose name is written in it.\",\n        \"seasons\": 1,\n        \"episodes\": 37,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/6/6f/Death_Note_Vol_1.jpg\"\n    },\n    {\n        \"id\": 8,\n        \"title\": \"Demon Slayer: Kimetsu no Yaiba\",\n        \"description\": \"A boy becomes a demon slayer after his family is slaughtered.\",\n        \"seasons\": 3,\n        \"episodes\": 55,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/7/7e/Kimetsu_no_Yaiba_Volume_1.png\"\n    },\n    {\n        \"id\": 9,\n        \"title\": \"One Punch Man\",\n        \"description\": \"A hero who can defeat any opponent with a single punch seeks a worthy challenge.\",\n        \"seasons\": 2,\n        \"episodes\": 24,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/3/3b/OnePunchMan_manga_cover.png\"\n    },\n    {\n        \"id\": 10,\n        \"title\": \"My Hero Academia\",\n        \"description\": \"In a world of superheroes, a boy without powers dreams of becoming a hero.\",\n        \"seasons\": 6,\n        \"episodes\": 138,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/0/0f/My_Hero_Academia_Volume_1.png\"\n    }\n]\n\nreturn mock_animes"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2448,
        336
      ],
      "id": "e33ad071-0b95-4eae-bf60-78608c4f3446",
      "name": "Get rated animes info (mocked BQ response)"
    },
    {
      "parameters": {
        "jsCode": "const ratings = $input.first().json.ratings || $input.last().json.ratings;\nconst ratingsMap = Object.fromEntries(\n  ratings.map(r => [r.anime_id, r.liked])\n);\n  \nreturn $input.all()\n  .filter(item => !item.json.ratings) // Only keep items that DON'T have ratings property\n  .map(item => ({\n    json: {\n      ...item.json,\n      liked: ratingsMap[item.json.id] || \"False\"\n    }\n  }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        432
      ],
      "id": "8388a05e-54ed-4a95-907e-c46e66b1f45d",
      "name": "Add like prop to rated animes"
    },
    {
      "parameters": {
        "content": "# Rated animes",
        "height": 480,
        "width": 960
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2768,
        208
      ],
      "typeVersion": 1,
      "id": "770a1cb1-c575-4587-9d11-5887a8f1b5ad",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "const user_anime_ratings = {\n  anime_ratings: $input.all().map(item => item.json)\n}\n\nreturn [\n  {\n    json: user_anime_ratings\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1776,
        432
      ],
      "id": "62554bd0-6962-430e-926f-02f53419e958",
      "name": "Join user anime ratings"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "anime_base: dict[str, list] = {\n  \"whole_anime_base\" : [item.json for item in _input.all()]\n}\n  \nreturn anime_base"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        432
      ],
      "id": "2ed1988a-969b-44cd-872e-60945c63fb38",
      "name": "Join BQ anime base"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "mock_animes: list[dict] = [\n    {\n        \"id\": 13,\n        \"title\": \"Bleach\",\n        \"description\": \"A teenager gains the powers of a Soul Reaper and battles evil spirits.\",\n        \"seasons\": 16,\n        \"episodes\": 366,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/7/72/Bleachanime.png\"\n    },\n    {\n        \"id\": 14,\n        \"title\": \"Jujutsu Kaisen\",\n        \"description\": \"A high schooler joins a secret organization to fight cursed spirits.\",\n        \"seasons\": 2,\n        \"episodes\": 47,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/4/46/Jujutsu_kaisen.jpg\"\n    },\n    {\n        \"id\": 15,\n        \"title\": \"Black Clover\",\n        \"description\": \"A boy born without magic aims to become the Wizard King.\",\n        \"seasons\": 4,\n        \"episodes\": 170,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/3/3a/Black_Clover_Volume_1.png\"\n    },\n    {\n        \"id\": 16,\n        \"title\": \"Hunter x Hunter\",\n        \"description\": \"A boy sets out to become a Hunter and find his missing father.\",\n        \"seasons\": 6,\n        \"episodes\": 148,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/d/d8/Hunter_x_Hunter_cover.jpg\"\n    },\n    {\n        \"id\": 17,\n        \"title\": \"Sword Art Online\",\n        \"description\": \"Players trapped in a virtual reality MMORPG must fight to survive.\",\n        \"seasons\": 4,\n        \"episodes\": 96,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/f/f4/Sword_Art_Online_light_novel_volume_1.png\"\n    },\n    {\n        \"id\": 18,\n        \"title\": \"Tokyo Ghoul\",\n        \"description\": \"A college student becomes part-ghoul after a deadly encounter.\",\n        \"seasons\": 4,\n        \"episodes\": 48,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/5/5e/Tokyo_Ghoul_volume_1_cover.jpg\"\n    },\n    {\n        \"id\": 19,\n        \"title\": \"Code Geass\",\n        \"description\": \"A young man gains a mysterious power to command anyone to obey him.\",\n        \"seasons\": 2,\n        \"episodes\": 50,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/0/05/Code_Geass_DVD.jpg\"\n    },\n    {\n        \"id\": 20,\n        \"title\": \"Fairy Tail\",\n        \"description\": \"A guild of mages takes on dangerous missions and powerful enemies.\",\n        \"seasons\": 9,\n        \"episodes\": 328,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/0/0f/FairyTail-Volume_1_Cover.jpg\"\n    },\n    {\n        \"id\": 21,\n        \"title\": \"The Seven Deadly Sins\",\n        \"description\": \"Knights embark on a quest to save their kingdom from corruption.\",\n        \"seasons\": 5,\n        \"episodes\": 100,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/7/7b/The_Seven_Deadly_Sins_DVD.jpg\"\n    },\n    {\n        \"id\": 22,\n        \"title\": \"Dr. Stone\",\n        \"description\": \"In a world turned to stone, a genius tries to rebuild civilization.\",\n        \"seasons\": 3,\n        \"episodes\": 49,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/b/b5/Dr._Stone_volume_1_cover.jpg\"\n    },\n    {\n        \"id\": 23,\n        \"title\": \"Mob Psycho 100\",\n        \"description\": \"A psychic boy tries to live a normal life while facing supernatural threats.\",\n        \"seasons\": 3,\n        \"episodes\": 37,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/f/f4/Mob_Psycho_100_cover.jpg\"\n    },\n    {\n        \"id\": 24,\n        \"title\": \"Blue Exorcist\",\n        \"description\": \"The son of Satan trains to become an exorcist.\",\n        \"seasons\": 3,\n        \"episodes\": 37,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/e/e9/Blue_Exorcist_volume_1_cover.jpg\"\n    },\n    {\n        \"id\": 25,\n        \"title\": \"Parasyte: The Maxim\",\n        \"description\": \"A teenager coexists with an alien parasite in his right hand.\",\n        \"seasons\": 1,\n        \"episodes\": 24,\n        \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/6/63/Parasyte_Manga_cover.jpg\"\n    }\n]\n\nreturn mock_animes"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1552,
        432
      ],
      "id": "6bf22fc2-3c2b-423b-97a1-15ae308d78d4",
      "name": "Get all animes (mocked BQ response)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=SYSTEM (role = Anime Recommender)\nYou are an anime recommender that selects titles ONLY from the provided `anime_base`.  \nYour goal: infer the user's taste from `user_ratings` and return the top {{$('Webhook').first().json.body.n_recommendations}} anime from `anime_base` ranked by how well they match those preferences.  \nDo NOT reveal your internal reasoning process or step-by-step thoughts.\n\nCOSTAR\n- Context:\n  - anime_base: A list of anime objects with fields: id, title, description, seasons, episodes, genres.\n  - user_ratings: A list of anime the user has rated (may NOT be in anime_base), with fields: title, rating, reasons.\nThe rated items provide clues about preferred and disliked attributes.\n  - all_approved: A field that may be returned after another agent reviews the recommendations.\n    - On the first run `executions_counter = 1`, all_approved will be undefined because there has been no review yet.\n    - On subsequent runs, if any recommendation is marked approved: false, then all_approved = false and that item will include a reason explaining the rejection.\n  - reviewed_recommendations: (optional) A list from another agent’s review of previous recommendations, where each item may include:\n  - approved: boolean (true if approved, false if rejected)\n  - reason: string\n  - All original recommendation fields. This is only present after a review; on the first run, it will be undefined.\n\n- Objective: Recommend the top {{ $('Webhook').first().json.body.n_recommendations }} anime from anime_base that best match the user's positive preferences while avoiding disfavored traits.\n- Style: Strictly JSON output, no natural language.\n- Tone: Neutral and concise.\n- Audience: Machine consumer.\n- Response: Only valid JSON following the OUTPUT SCHEMA.\n\nRAG-like method (adapted for small base):\n1) Extract preference signals from `user_ratings`:\n   - Positive set: ratings ≥ 4\n   - Negative set: ratings ≤ 2\n   - Infer preferred genres, themes, tone from positives; disfavored ones from negatives.\n2) Score each anime in `anime_base` for similarity to positive profile and dissimilarity to negative profile.\n3) Sort descending by score, select top {{$('Webhook').first().json.body.n_recommendations}}.\n\nScoring rubric:\nscore = 100 * (\n  0.5 * GenreThemeMatch +\n  0.3 * ToneMatch +\n  0.1 * Novelty (not similar to negatives) +\n  0.1 * LengthFit\n)\n\nINPUTS\nanime_base = {{ $('Join BQ anime base').first().json.toJsonString() }}\nuser_ratings = {{ $('Join user anime ratings').first().json.toJsonString()}}\nprevious_review = {{ $('Increase executions counter')?.isExecuted ? $('Increase executions counter').first().json.toJsonString() : undefined}}\nparams:\n  POS_THRESHOLD = 4    \n  NEG_THRESHOLD = 2    \n\nCONSTRAINTS\n- Recommend only from anime_base.\n- Number of recommendations == {{$('Webhook').first().json.body.n_recommendations}}.\n- No extra text outside the JSON object.\n- Always output recommendations.\n\nOUTPUT SCHEMA\n{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"alikeness\": \"float\",\n      \"image_url\": \"string\"\n    }\n  ],\n  \"executions_counter\": \"int. If not set, set it to 1.\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1072,
        432
      ],
      "id": "4e02f84d-814d-4687-979d-134e039c2bfb",
      "name": "Anime recommendations agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1104,
        656
      ],
      "id": "d1c15c55-6ab1-4df5-be6b-e1cb2bc76d7f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"alikeness\": \"float\",\n      \"image_url\": \"string\"\n    }\n  ],\n  \"executions_counter\": \"int. If not set, set it to 1.\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -976,
        656
      ],
      "id": "2723c651-68dc-4eb6-8947-7de1f3d1d58a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an anime recommender assistant that only works with anime already recommended by another agent.\n\nYour goal: take the recommended_animes list and rewrite each description to maximize the chance the user will be interested.\nYou must infer the user’s taste from user_ratings and make each rewritten description more appealing by emphasizing relevant traits.\nFor each anime, append to the rewritten description a \"why\" statement in the form:\nSince you liked [title(s) from user_ratings], you might enjoy this because [reason].\nDo NOT reveal your internal reasoning process or step-by-step thoughts.\n\nContext:\n\nrecommended_animes: Anime objects with fields: id, title, description, seasons, episodes, genres.\n\nuser_ratings: Anime the user has rated, with fields: title, rating, reasons.\n\nObjective: Rewrite the description for each anime to better match inferred positive preferences, avoid disliked traits, and integrate the “why” into the description.\n\nStyle: Succinct, vivid, non-spoilery.\nTone: Friendly and engaging.\nAudience: System consuming JSON output.\nResponse: Must be valid JSON following the “OUTPUT SCHEMA”.\n\nInfer preferred themes, genres, tones.\n\nFor each anime in recommended_animes:\n\nKeep original plot essence but emphasize elements the user likes.\n\nAppend “why” at the end of the rewritten description.\n\nOutput in required JSON schema.\n\nOUTPUT SCHEMA:\n{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string. The improved version of the anime description.\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"image_url\": \"string\"\n    }\n  ]\n}\n\nInputs:\nrecommended_animes = {{ $('Anime recommendations agent').first().json.output.recommendations.toJsonString() }}\nuser_ratings = {{ $('Join user anime ratings').first().json.anime_ratings.toJsonString() }}\n\nConstraints:\n- Always output recommendations\n\n- Use only recommended_animes (no new titles).\n\n- Keep rewritten_description ≤ 65 words total (including the “why” statement).\n\n- “why” must start exactly with \"Since you liked...\".\n\n- Output must be pure JSON — no extra commentary.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        144,
        0
      ],
      "id": "70f211fe-3f47-4713-b510-d8a1f9f07089",
      "name": "Description improver agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        112,
        224
      ],
      "id": "3f43cb98-dba9-4771-841b-5e1e733c0867",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Role\nYou are an Anime Recommendation Quality Evaluator. Your job is to:\n\nAnalyze a list of animes that a user has rated.\n\nAnalyze the recommendations provided by another recommender model.\n\nDetermine whether each recommendation is Good (Approved = True) or Bad (Approved = False).\n\nInputs explanation\nYou will receive:\n\nuser_rated_animes: A list of anime objects the user has rated, including id, title, rating, and optionally genres or tags.\n\nmodel_recommendations: A list of anime objects recommended by a previous model, with id, title, and description.\n\nInputs\n- user_rated_animes: {{ $('Join user anime ratings').first().json.anime_ratings.toJsonString() }}\n- model_recommendations: {{ $('Anime recommendations agent').item.json.output.recommendations.toJsonString() }}\n\nEvaluation Criteria\nMark a recommendation as Approved = True if:\n\n- High Thematic Similarity – It shares multiple main genres, themes, or settings with the user’s highly-rated animes.\n\n- Tone & Style Match – The mood, pacing, and storytelling style are close to the liked animes.\n\n- Audience Alignment – The target audience is similar (e.g., shounen vs. seinen).\n\n- Popularity & Quality – It has good reception and is recognized among fans as similar to the liked shows.\n\nMark as Approved = False if:\n\n- The genre, tone, or theme is too different from the user’s liked animes.\n\n- It is unrelated in plot, style, or audience.\n\n- It appears in the user’s disliked or low-rated list.\n\nWhen regenerating recommendations:\n\n- Only propose titles that strongly match the user’s highly-rated animes.\n\n- Do not repeat the original bad recommendations.\n\nInstructions\n\n1. Review user_rated_animes and identify the characteristics of the animes rated highly.\n\n2. Evaluate each model_recommendation according to the Evaluation Criteria.\n\n3. Output an Approved field for each recommendation.\n\n4. Always output recommendations\n\nEnsure the final recommendation list length does not exceed max_recommendations.\n\nProvide a short explanation for each approval/rejection.\n\nExample Output Schema\n{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"alikeness\": \"float\",\n      \"image_url\": \"string\",\n      \"approved\": \"boolean. If the current recommendation if approved or not.\",\n      \"reason\": \"string. The reason as of why the recommendation was not approved.\"\n    }\n  ],\n  \"all_approved\": true,\n  \"executions_counter\": \"int\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -576,
        256
      ],
      "id": "7b7d0e77-c3a9-4d27-9517-ffe7182ab3a3",
      "name": "Recommendations analyzer"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"image_url\": \"string\"\n    }\n  ]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        240,
        224
      ],
      "id": "7ac52950-0bd4-4155-8521-6ff3e1734283",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -608,
        480
      ],
      "id": "e7406083-1942-4518-80fe-312869ddc5ed",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"recommendations\": [\n    {\n      \"id\": \"int\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"seasons\": \"int\",\n      \"episodes\": \"int\",\n      \"alikeness\": \"float\",\n      \"image_url\": \"string\",\n      \"approved\": \"boolean. If the current recommendation if approved or not.\",\n      \"reason\": \"string. The reason as of why the recommendation was not approved.\"\n    }\n  ],\n  \"all_approved\": true,\n  \"executions_counter\": \"int\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -480,
        480
      ],
      "id": "6d286d96-2c35-4410-b43f-2069359587d7",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "74158146-8569-47b2-ae29-bd2e5d29aae0",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2896,
        432
      ],
      "id": "e3584cb9-5942-483e-9a0f-779e520c6222",
      "name": "Webhook",
      "webhookId": "74158146-8569-47b2-ae29-bd2e5d29aae0"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0165c68c-b59f-43b5-a211-120c388d3a4c",
              "leftValue": "={{ $('Increase executions counter')?.isExecuted ? $('Increase executions counter').first().json.output.executions_counter : 0}}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "a1fbd51d-ae7d-408d-a602-1daa76c4127b",
              "leftValue": "={{ $('Recommendations analyzer').item.json.output.all_approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        256
      ],
      "id": "8e2853f1-b8f0-4da9-a89d-fe7b3a0e4da7",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "$input.first().json.output.executions_counter += 1; \n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        248,
        632
      ],
      "id": "219c44d2-5b36-4d65-bfee-bb57baff0379",
      "name": "Increase executions counter"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"recommendations\":{{ $('Description improver agent').first().json.output.recommendations.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        608,
        208
      ],
      "id": "23b0f16b-ec37-410e-ac83-0ccf773f6d6a",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        320,
        432
      ],
      "id": "73d2a596-7fcf-48ac-80c1-3ad7a7a1fa34",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -896,
        864
      ],
      "id": "d65f8474-dd5b-4d0b-bcbb-ea09541b48ea",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -400,
        688
      ],
      "id": "02a12a13-bbea-4db6-98f4-6f940c5492f4",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "0ocO5NtT1NIFfrNO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Fetch animes ids": {
      "main": [
        [
          {
            "node": "Get rated animes info (mocked BQ response)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ratings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Add like prop to rated animes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get rated animes info (mocked BQ response)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add like prop to rated animes": {
      "main": [
        [
          {
            "node": "Join user anime ratings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join user anime ratings": {
      "main": [
        [
          {
            "node": "Get all animes (mocked BQ response)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all animes (mocked BQ response)": {
      "main": [
        [
          {
            "node": "Join BQ anime base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join BQ anime base": {
      "main": [
        [
          {
            "node": "Anime recommendations agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Anime recommendations agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Anime recommendations agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Anime recommendations agent": {
      "main": [
        [
          {
            "node": "Recommendations analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Description improver agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Description improver agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Description improver agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Recommendations analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Recommendations analyzer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Fetch animes ids",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get ratings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recommendations analyzer": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Description improver agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Increase executions counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increase executions counter": {
      "main": [
        [
          {
            "node": "Anime recommendations agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6d1131f5-8939-4b73-aafe-fb770914961f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ff78cac8a1226869adb6fe373578b2106a46fb0ea05b28ae654d1048352a809c"
  },
  "id": "CBuqZTrfr2X9sNo9",
  "tags": []
}